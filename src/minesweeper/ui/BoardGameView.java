package minesweeper.ui;

import minesweeper.ArtificialPlayer;
import minesweeper.Grid;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.lang.reflect.Constructor;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Projet de joueur artificiel de Minesweeper avec différents algorithmes
 * Dans le cadre du 3e TP en Intelligence Artificielle (INF4230)
 * <p/>
 * Automne 2014
 * Par l'équipe:
 * Martin Bouchard
 * Frédéric Vachon
 * Louis-Bertrand Varin
 * Geneviève Lalonde
 * Nilovna Bascunan-Vasquez
 */
public class BoardGameView extends JFrame implements OutputObserver {
    /*Object for running game*/
    private GameRunner runner = null;
    private Runnable task = null;
    private Thread t = null;

    private boolean isInfiniteGame = GLOBAL.CONTINUE_AFTER;
    private int nbMines = 0;
    private int delayTime = 100;
    private int nbLost = 0;
    private int nbWins = 0;
    private int thinkLimit = 1000;
    private int caseSize = 16;
    private int nbCols = 0;
    private int nbLines = 0;
    private String designName = GLOBAL.DEFAULT_DESIGN;
    private final ArtificialPlayer ai;

    private GridView grilleGv;
    private GridController gridController;
    private final Grid grid;

    private Box grilleGameBox;
    private JButton startGameBtn;
    private JButton pauseGameBtn;
    private JButton resetGameBtn;
    private JButton nextStepGameBtn;
    private JButton saveGameBtn;
    private JPanel infoCurrentGamePanel;
    private JLabel aiNameLabel;
    private JLabel nbLignesLabel;
    private JLabel nbColsLabel;
    private JLabel nbMinesLabel;
    private JLabel nbMinesValueLabel;
    private JLabel nbLignesValueLabel;
    private JLabel nbColsValueLabel;
    private JLabel aiNameValueLabel;
    private JLabel nbFlagsLabel;
    private JLabel nbWinsLabel;
    private JLabel nbLossLabel;
    private JLabel nbLossValueLabel;
    private JLabel nbWinsValueLabel;
    private JLabel nbFlagsValueLabel;
    private JLabel continueGameLabel;
    private JPanel statistiquesPanel;
    private JPanel optionsGamePanel;
    private JPanel debugPanel;
    private JPanel rootPanel;
    private JPanel statsContentPanel;
    private JPanel optionsBtnPanel;
    private JPanel rightSidePanel;
    private JPanel leftSidePanel;
    private JRadioButton yesContinueGameRbtn;
    private JRadioButton noContinueGameRbtn;
    private JScrollPane debugScrollPane;
    private JTextArea debugTextArea;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(15, 15, 15, 15), -1, -1));
        rightSidePanel = new JPanel();
        rightSidePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 1, new Insets(0, 0, 0, 0), -1, -1));
        rightSidePanel.setForeground(new Color(-3355444));
        rootPanel.add(rightSidePanel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        statistiquesPanel = new JPanel();
        statistiquesPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(10, 20, 10, 20), -1, -1));
        rightSidePanel.add(statistiquesPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        statistiquesPanel.setBorder(BorderFactory.createTitledBorder("Statistiques"));
        statsContentPanel = new JPanel();
        statsContentPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        statistiquesPanel.add(statsContentPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nbFlagsLabel = new JLabel();
        nbFlagsLabel.setText("Nombre de drapeaux:");
        statsContentPanel.add(nbFlagsLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(153, 17), null, 0, false));
        nbWinsLabel = new JLabel();
        nbWinsLabel.setText("Nombre de victoires:");
        statsContentPanel.add(nbWinsLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(153, 17), null, 0, false));
        nbLossLabel = new JLabel();
        nbLossLabel.setText("Nombre de défaites:");
        statsContentPanel.add(nbLossLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(153, 17), null, 0, false));
        nbLossValueLabel = new JLabel();
        nbLossValueLabel.setText("0");
        statsContentPanel.add(nbLossValueLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nbFlagsValueLabel.setText("0");
        statsContentPanel.add(nbFlagsValueLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nbWinsValueLabel = new JLabel();
        nbWinsValueLabel.setText("0");
        statsContentPanel.add(nbWinsValueLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        rightSidePanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        rightSidePanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(-1, 10), null, 0, false));
        optionsGamePanel = new JPanel();
        optionsGamePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 1, new Insets(10, 20, 10, 20), -1, -1));
        rightSidePanel.add(optionsGamePanel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        optionsGamePanel.setBorder(BorderFactory.createTitledBorder("Options partie en cours"));
        optionsBtnPanel = new JPanel();
        optionsBtnPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        optionsGamePanel.add(optionsBtnPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        startGameBtn = new JButton();
        startGameBtn.setText("Démarrer");
        optionsBtnPanel.add(startGameBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pauseGameBtn = new JButton();
        pauseGameBtn.setText("Pause");
        optionsBtnPanel.add(pauseGameBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        resetGameBtn = new JButton();
        resetGameBtn.setText("Réinitialiser");
        optionsBtnPanel.add(resetGameBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nextStepGameBtn = new JButton();
        nextStepGameBtn.setText("Prochain pas");
        optionsBtnPanel.add(nextStepGameBtn, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        yesContinueGameRbtn = new JRadioButton();
        yesContinueGameRbtn.setText("Oui");
        optionsGamePanel.add(yesContinueGameRbtn, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        noContinueGameRbtn = new JRadioButton();
        noContinueGameRbtn.setText("Non");
        optionsGamePanel.add(noContinueGameRbtn, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        continueGameLabel = new JLabel();
        continueGameLabel.setText("Rejouer automatiquement à la fin de la partie?");
        optionsGamePanel.add(continueGameLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        optionsGamePanel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(-1, 20), null, 0, false));
        final JSeparator separator1 = new JSeparator();
        separator1.setForeground(new Color(-3355444));
        optionsGamePanel.add(separator1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        optionsGamePanel.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(-1, 15), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer5 = new com.intellij.uiDesigner.core.Spacer();
        rightSidePanel.add(spacer5, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(-1, 10), null, 0, false));
        debugPanel = new JPanel();
        debugPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(10, 20, 10, 20), -1, -1));
        debugPanel.setEnabled(true);
        rightSidePanel.add(debugPanel, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        debugPanel.setBorder(BorderFactory.createTitledBorder("Debug"));
        saveGameBtn = new JButton();
        saveGameBtn.setText("Sauvegarder la partie");
        debugPanel.add(saveGameBtn, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        debugScrollPane = new JScrollPane();
        debugPanel.add(debugScrollPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        debugTextArea = new JTextArea();
        debugTextArea.setColumns(30);
        debugTextArea.setEditable(false);
        debugTextArea.setRows(5);
        debugTextArea.setSelectionEnd(33);
        debugTextArea.setSelectionStart(33);
        debugTextArea.setText("Initialiser l'IA: Safe or Random\n");
        debugScrollPane.setViewportView(debugTextArea);
        infoCurrentGamePanel = new JPanel();
        infoCurrentGamePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(10, 20, 10, 20), -1, -1));
        rightSidePanel.add(infoCurrentGamePanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        infoCurrentGamePanel.setBorder(BorderFactory.createTitledBorder("Informations"));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        infoCurrentGamePanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        aiNameLabel = new JLabel();
        aiNameLabel.setText("AI:");
        panel1.add(aiNameLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(153, 17), null, 0, false));
        nbLignesLabel = new JLabel();
        nbLignesLabel.setText("Nombre de lignes:");
        panel1.add(nbLignesLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(153, 17), null, 0, false));
        nbMinesLabel = new JLabel();
        nbMinesLabel.setText("Nombre de mines:");
        panel1.add(nbMinesLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(153, 17), null, 0, false));
        nbColsLabel = new JLabel();
        nbColsLabel.setText("Nombre de colonnes:");
        panel1.add(nbColsLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(153, 17), null, 0, false));
        nbMinesValueLabel = new JLabel();
        nbMinesValueLabel.setText("0");
        panel1.add(nbMinesValueLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nbLignesValueLabel = new JLabel();
        nbLignesValueLabel.setText("0");
        panel1.add(nbLignesValueLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nbColsValueLabel = new JLabel();
        nbColsValueLabel.setText("0");
        panel1.add(nbColsValueLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        aiNameValueLabel = new JLabel();
        aiNameValueLabel.setText("0");
        panel1.add(aiNameValueLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer6 = new com.intellij.uiDesigner.core.Spacer();
        rightSidePanel.add(spacer6, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(-1, 10), null, 0, false));
        rootPanel.add(leftSidePanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        grilleGameBox.setDoubleBuffered(false);
        grilleGameBox.setOpaque(false);
        rootPanel.add(grilleGameBox, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(10, 10), null, 0, false));
        final JSeparator separator2 = new JSeparator();
        separator2.setForeground(new Color(-3355444));
        separator2.setOrientation(1);
        rootPanel.add(separator2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(yesContinueGameRbtn);
        buttonGroup.add(noContinueGameRbtn);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    public static class GameBuilder {
        // Defaults if not set
        int nbLignes = GLOBAL.NBLIGNE;
        int nbCols = GLOBAL.NBCOL;
        int nbMines = GLOBAL.NBMINES;
        int delayTime = GLOBAL.DEFAULT_DELAY;
        int thinkLimit = GLOBAL.DEFAULT_MAXTHINK;
        int caseSize = GLOBAL.CELL_SIZE;

        Grid grid = null;
        ArtificialPlayer ai;
        String aiName;
        String designName = GLOBAL.DEFAULT_DESIGN;

        public GameBuilder() {

        }

        public BoardGameView build() {
            if (this.grid == null) {
                this.grid = new Grid(nbLignes, nbCols, nbMines);
            }
            return new BoardGameView(this);
        }

        public GameBuilder loadGrid(File f) {
            this.grid = new Grid();
            this.grid.loadFromFile(f);
            this.nbCols = grid.nbCols;
            this.nbLignes = grid.nbLignes;
            this.nbMines = grid.nbMines;
            return this;
        }

        public GameBuilder row(int nbLignes) {
            this.nbLignes = nbLignes;
            return this;
        }

        public GameBuilder design(String designName) {
            this.designName = designName;
            return this;
        }

        public GameBuilder col(int nbCols) {
            this.nbCols = nbCols;
            return this;
        }

        public GameBuilder mines(int nbMines) {
            this.nbMines = nbMines;
            return this;
        }

        public GameBuilder delay(int delayTime) {
            this.delayTime = delayTime;
            return this;
        }

        public GameBuilder think(int thinkLimit) {
            this.thinkLimit = thinkLimit;
            return this;
        }

        public GameBuilder caseSize(int caseSize) {
            this.caseSize = caseSize;
            return this;
        }

        public GameBuilder aiName(String aiName) {
            this.aiName = aiName;
            this.ai = getAI(aiName);
            return this;
        }

        // Prend le nom du ai et va chercher la class puis cree une instance
        private ArtificialPlayer getAI(String aiName) {
            ArtificialPlayer returnAi = null;
            try {
                Class c = Class.forName(aiName);
                Constructor<?> constructor = c.getConstructor();
                returnAi = (ArtificialPlayer) constructor.newInstance();
            } catch (Exception e) {
                System.out.println(e);
            }
            return returnAi;
        }
    }

    private BoardGameView(GameBuilder b) {
        this.grid = b.grid;
        this.caseSize = b.caseSize;
        this.nbCols = b.nbCols;
        this.nbMines = b.nbMines;
        this.nbLines = b.nbLignes;
        this.ai = b.ai;
        this.delayTime = b.delayTime;
        this.thinkLimit = b.thinkLimit;
        this.designName = b.designName;

        $$$setupUI$$$();
        setContentPane(rootPanel);
        setTitle(this.ai.getName());

        // Valeurs par défaut pour certains éléments du UI
        int percentMines = (nbMines * 100) / (nbCols * nbLines);
        nbLignesValueLabel.setText(String.valueOf(nbLines));
        nbColsValueLabel.setText(String.valueOf(nbCols));
        nbMinesValueLabel.setText(String.valueOf(nbMines) + " (" + String.valueOf(percentMines) + " %)");
        aiNameValueLabel.setText(ai.getName());
        yesContinueGameRbtn.setSelected(isInfiniteGame);
        message("Initialiser l'IA: " + this.ai.getName());

        // Action listeners
        startGameBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                startGame();
            }
        });

        pauseGameBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (runner != null) {
                    runner.terminate();
                    runner = null;
                }
            }
        });

        resetGameBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetGame();
            }
        });

        nextStepGameBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ((JButton) e.getSource()).setEnabled(false);
                if (runner == null) {
                    startGame();
                    runner.terminate();
                }
            }
        });

        saveGameBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveGrid();
            }
        });

        yesContinueGameRbtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                isInfiniteGame = true;
            }
        });

        noContinueGameRbtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                isInfiniteGame = false;
            }
        });

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                closingCleanUp();
            }
        });

        pack();
        setVisible(true);
    }

    private void createUIComponents() {
        int width = (nbCols * (caseSize)); //pour expert : 480
        int height = (nbLines * (caseSize)); //pour expert :280

        nbFlagsValueLabel = new JLabel();

        // Contruire la grille du jeu
        grilleGameBox = new Box(BoxLayout.Y_AXIS);
        grilleGameBox.setAlignmentX(JComponent.CENTER_ALIGNMENT);

        // Setter la GridView  (grill)
        grilleGv = new GridView(nbLines, nbCols, width, height, caseSize, designName);
        grilleGv.setBackground(new Color(0x33383D));
        grilleGv.setGrid(grid);
        gridController = new GridControllerImpl(grid, grilleGv, nbFlagsValueLabel);
        grilleGv.setController(gridController);
        grilleGv.repaint();

        leftSidePanel = new JPanel(new GridBagLayout());
        leftSidePanel.add(grilleGv);
    }

    private synchronized void startGame() {
        try {
            if (runner == null) {
                runner = new GameRunner(ai, grid, gridController, delayTime, thinkLimit);
                runner.setOutputObserver(this);
                task = new Runnable() {
                    @Override
                    public void run() {
                        try {
                            System.gc();
                            runner.run();
                            System.gc();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                };

                t = new Thread(task);
                t.start();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }


    void resetGame() {
        grid.resetGrid();

        if (t != null) {
            t.interrupt();
        }
        if (runner != null) runner.terminate();
        runner = null;
        grilleGv.repaint();
        nbFlagsValueLabel.setText(String.valueOf(nbMines));
        nextStepGameBtn.setEnabled(true);
        message("Grille réinitialisée.");
    }


    /* De connect5 auteur Éric beaudry */
    public synchronized void message(final String msg) {
        debugTextArea.append(msg + "\n");
        debugTextArea.setCaretPosition(debugTextArea.getDocument().getLength());
    }

    @Override
    public synchronized void callback() {
        if (isInfiniteGame && (runner != null && runner.isRunning())) {
            resetGame();
            startGame();
        } else {
            runner = null;
        }

        /*Remettre disponible le step button au cas ou il avait ete desactive (pour prevenir  le spam)*/
        nextStepGameBtn.setEnabled(true);
    }

    @Override
    public void updateLost() {
        nbLost++;
        nbLossValueLabel.setText(String.valueOf(nbLost));
    }

    @Override
    public void updateWins() {
        nbWins++;
        nbWinsValueLabel.setText(String.valueOf(nbWins));
    }

    private void closingCleanUp() {
        if (t != null) {
            t.interrupt();
        }

        if (task != null) {
            task = null;
        }

        if (runner != null) {
            runner.terminate();
            runner = null;
        }
    }

    void saveGrid() {
        try {
            Format formatter = new SimpleDateFormat("MM-dd_hh-mm-ss");
            String fileName = "grid-" + (formatter.format(new Date()));
            grid.saveToFile(fileName);
            message("Grille enregistree : " + fileName);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
